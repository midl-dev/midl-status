name: ci

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  pytest:
    runs-on: ubuntu-latest
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      #----------------------------------------------
      #              run pytest
      #----------------------------------------------
      - name: Run tests
        run:  |
          set -o pipefail
          poetry run pytest -v --cov=app | tee pytest-coverage.txt
          set +o pipefail

      #----------------------------------------------
      #              Post coverage comment
      #----------------------------------------------
      - name: Comment coverage
        uses: coroo/pytest-coverage-commentator@v1.0.2

  mypy:
    runs-on: ubuntu-latest
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      #----------------------------------------------
      #              run mypy
      #----------------------------------------------
      - name: Run mypy
        run:  |
          poetry run mypy

  publish_containers:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Login to registry
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v3
      with:
        images: ghcr.io/${{ github.repository_owner }}/midl-status
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=match,pattern=v(.*),group=1

    - name: Push to GHCR
      uses: docker/build-push-action@v2
      with:
        context: .
        file: Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  lint_helm_charts:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Helm
        uses: azure/setup-helm@v3

      - name: Lint Helm Charts
        run: helm lint charts/*

  publish_helm_charts:
      runs-on: ubuntu-latest
      needs: [lint_helm_charts, publish_containers]
      if: github.event_name == 'release' && github.event.action == 'created'
      steps:
        - name: Checkout
          uses: actions/checkout@v2

        - name: Install yq
          run: |
            sudo wget -q https://github.com/mikefarah/yq/releases/download/v4.2.0/yq_linux_amd64 -O /usr/bin/yq
            sudo chmod +x /usr/bin/yq

        - name: Get Release Version
          id: get_release_version
          run: echo "::set-output name=RELEASE_VERSION::${GITHUB_REF/refs\/tags\//}"

        - name: Set Helm Chart and Image Versions
          run: |
            set -x

            RELEASE_VERSION=${{ steps.get_release_version.outputs.RELEASE_VERSION }}

            yq e ".version = \"$RELEASE_VERSION\"" -i "$chart/Chart.yaml"

            yq e ".image.tag = \"$RELEASE_VERSION\"" -i "$chart/values.yaml"

        - name: Publish Helm charts
          uses: stefanprodan/helm-gh-pages@master
          with:
            linting: off # We already linted in a job before
            token: ${{ secrets.GITHUB_TOKEN }}
            branch: gh-pages
