image:
  # image config
  repository: ghcr.io/midl-dev/midl-status
  tag: main
  pullPolicy: Always
  imagePullSecrets: []

configmap:
  data:
    FLASK_DEBUG: "False"
    FLASK_ENV: "production"
    FLASK_RUN_HOST: '0.0.0.0'
    FLASK_RUN_PORT: '5000'


secrets:
  data:
    SECRET_KEY: ""
    SQLALCHEMY_DATABASE_URI: ""
    CELERY_BROKER_URL: ""
    CELERY_RESULT_BACKEND: ""
    MIDL_LOKI_URL: ""

statusServer:
  replicaCount: 1

  podSecurityContext: {}
  # fsGroup: 2000

  securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

  service:
    type: ClusterIP
    port: 5000

  resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

  nodeSelector: {}

  tolerations: []

  affinity: {}

celeryBeat:
  enabled: true

  command: ["/bin/bash"]
  args: ["-c", "celery -A app.worker:celery beat --loglevel=INFO"]

  podSecurityContext: {}

  securityContext: {}

  resources: {}

  nodeSelector: {}

  tolerations: []
  affinity: {}

celeryWorker:
  enabled: true

  queue:
    # This is a list that supports multiple queues
    - name: celery
      replicaCount: 1
      command: ["/bin/bash"]
      args: ["-c", "celery -A app.worker:celery worker --loglevel=INFO"]
      podSecurityContext: {}
      securityContext: {}
      resources: {}
      nodeSelector: {}
      tolerations: []
      affinity: {}

migrateJob:
  enabled: false
